name: build
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16.0'
      - name: Build App
        run: cd go && CGO_ENABLED=0 go build -o demoapp main.go && cd ..
      - name: Upload demoapp binary
        uses: actions/upload-artifact@v2
        with:
          name: demoapp
          path: go/demoapp

  image:
    name: Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download demoapp binary
        uses: actions/download-artifact@v4.1.7
        with:
          name: demoapp
      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v1
      - name: Init Packer Plugins
        run: packer init packer/app.pkr.hcl
      - name: Install Manual Packer Plugins
        run: |
          curl -L -o packer-provisioner-goss.tgz https://github.com/YaleUniversity/packer-provisioner-goss/releases/download/v3.0.3/packer-provisioner-goss-v3.0.3-linux-amd64.tar.gz
          tar zxf packer-provisioner-goss.tgz
          mv packer-provisioner-goss $HOME/.packer.d/plugins/
          sleep 30
      - name: Validate Template
        run: packer validate -syntax-only packer/app.pkr.hcl
      - name: Build Image
        run: packer build packer/app.pkr.hcl
        env:
          UPCLOUD_API_PASSWORD: ${{ secrets.UPCLOUD_API_PASSWORD }}
          UPCLOUD_API_USER: github

  terraform:
    name: Apply Terraform
    runs-on: ubuntu-latest
    needs: image
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Get Upctl CLI
        run: |
          curl -L -o upcloud_cli.tar.gz https://github.com/UpCloudLtd/upcloud-cli/releases/download/v1.0.0/upcloud-cli_1.0.0_linux_x86_64.tar.gz
          tar zxf upcloud_cli.tar.gz
          chmod +x upctl
          ./upctl -h
      - name: Get Latest Image
        run: |
          set -o pipefail
          cd terraform
          echo "template_id = \"$(../upctl storage list --template -o json | jq '[.[] | select(.title | startswith("oc-uc-app-"))] | sort_by(.title) | reverse[0] | .uuid' -r)\"" > terraform.auto.tfvars
        env:
          UPCLOUD_PASSWORD: ${{ secrets.UPCLOUD_API_PASSWORD }}
          UPCLOUD_USERNAME: github
      - name: Terraform Init
        run: cd terraform && terraform init
      - name: Terraform Plan
        run: cd terraform && terraform plan
      - name: Terraform Apply
        run: cd terraform && terraform apply -auto-approve

  image_tidy:
    name: Tidy Old Images
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Get Upctl CLI
        run: |
          curl -L -o upcloud_cli.tar.gz https://github.com/UpCloudLtd/upcloud-cli/releases/download/v1.0.0/upcloud-cli_1.0.0_linux_x86_64.tar.gz
          tar zxf upcloud_cli.tar.gz
          chmod +x upctl
          ./upctl -h
      - name: Delete all but the last 5 images
        run: |
          ./upctl storage list --template -o json | jq '.[] | .title' -r | sort | head -n -5 | xargs -I{} ./upctl storage delete {}
        env:
          UPCLOUD_PASSWORD: ${{ secrets.UPCLOUD_API_PASSWORD }}
          UPCLOUD_USERNAME: github
 
